//////////////////////////////////////////////////////////////////////
// Function 1 - Object Values ////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function objectValues(object) {
    return Object.values( object );
    // let arr = [];
    // for ( let key in object ) {
    //     arr.push( object[ key ] );
    // }
    // return arr;
} 

//////////////////////////////////////////////////////////////////////
// Function 2 - Keys to String ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function keysToString(object) {
    return Object.keys( object ).join( ' ' );
    // let str = '';
    // for ( let key in object ) {
    //     str += key + ' ';
    // }
    // return str.trim();
}

//////////////////////////////////////////////////////////////////////
// Function 3 - Values to String /////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function valuesToString(object) {
    return Object.values( object ).filter( v => typeof v === 'string' ).join( ' ' );
    // let arr = [];
    // for ( let key in object ) {
    //     if ( typeof object[ key ] === 'string' ) {
    //         arr.push( object[ key ] );
    //     }
    // }
    // return arr.join( ' ' );
}

//////////////////////////////////////////////////////////////////////
// Function 4 - Array or Object //////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function arrayOrObject(collection) {
    return Object.prototype.toString.call( collection ).replace( /\[object (.*)\]/, "$1" ).toLowerCase();
}

//////////////////////////////////////////////////////////////////////
// Function 5 - Capitalize Word //////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function capitalizeWord(string) {
    return string[0].toUpperCase() + string.slice(1).toLowerCase();
}

//////////////////////////////////////////////////////////////////////
// Function 6 - Capitalize All Words /////////////////////////////////
//////////////////////////////////////////////////////////////////////

function capitalizeAllWords(string) {
    return string.split( ' ' ).map( s => capitalizeWord( s ) ).join( ' ' );
}

//////////////////////////////////////////////////////////////////////
// Function 7 - Welcome Message //////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function welcomeMessage(object) {
    return `Welcome ${capitalizeWord( object.name )}!`;
}

//////////////////////////////////////////////////////////////////////
// Function 8 - Profile Info /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function profileInfo(object) {
    return `${ capitalizeWord( object.name ) } is a ${ capitalizeWord( object.species ) }`;
}

//////////////////////////////////////////////////////////////////////
// Function 9 - Maybe Noises /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function maybeNoises(object) {
    return ( Array.isArray( object.noises ) && object.noises.length > 0 ) ? object.noises.join( ' ' ) : "there are no noises";
    // if ( Array.isArray( object.noises ) && object.noises.length > 0 ) {
    //     return object.noises.join( ' ' );
    // }
    // else {
    //     return "there are no noises";
    // }
}

//////////////////////////////////////////////////////////////////////
// Function 10 - Has Words ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function hasWord(string, word) {
    return string.includes( word );
    // more ways to do it, that check for whole-word matches only
    // return string.split( ' ' ).filter( w => w === word ).length > 0;
    // return string.split( ' ' ).includes( word );
}

//////////////////////////////////////////////////////////////////////
// Function 11 - Add Friend //////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function addFriend (name, object) {
    if ( object.friends.push( name ) ) return object;
}

//////////////////////////////////////////////////////////////////////
// Function 12 - Is Friend ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function isFriend(name, object) {
    return Array.isArray( object.friends ) ? object.friends.includes( name ) : false;
    // if ( Array.isArray( object.friends ) ) {
    //     return object.friends.includes( name );
    // }
    // return false;
}

//////////////////////////////////////////////////////////////////////
// Function 13 - Non-Friends /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function nonFriends(name, array) {
    return array.filter( p => ! isFriend( name, p ) && p.name !== name ).map( p => p.name );
    // let arr = [];
    
    // for (let i = 0; i < array.length; i++) {
    //     if ( ! isFriend( name, array[i] ) && array[i].name !== name ) {
    //         arr.push( array[ i ].name );
    //     }
    // }
    
    // return arr;
}

//////////////////////////////////////////////////////////////////////
// Function 14 - Update Object ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function updateObject(object, key, value) {
    if ( object[ key ] = value ) return object;
}

//////////////////////////////////////////////////////////////////////
// Function 15 - Remove Properties ///////////////////////////////////
//////////////////////////////////////////////////////////////////////

function removeProperties(object, array) {
    array.map( p => delete object[ p ] );
}

//////////////////////////////////////////////////////////////////////
// Function 16 - Dedup ///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function dedup(array) {
    return Object.keys( array ).map( s => parseInt( s ) ).filter( i => ! array.slice( 0, i ).includes( array[i] ) ).map( x => array[x] );
}

//////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE ////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

if((typeof process !== 'undefined') &&
   (typeof process.versions.node !== 'undefined')) {
    // here, export any references you need for tests //
    module.exports.objectValues = objectValues;
    module.exports.keysToString = keysToString;
    module.exports.valuesToString = valuesToString;
    module.exports.arrayOrObject = arrayOrObject;
    module.exports.capitalizeWord = capitalizeWord;
    module.exports.capitalizeAllWords = capitalizeAllWords;
    module.exports.welcomeMessage = welcomeMessage;
    module.exports.profileInfo = profileInfo;
    module.exports.maybeNoises = maybeNoises;
    module.exports.hasWord = hasWord;
    module.exports.addFriend = addFriend;
    module.exports.isFriend = isFriend;
    module.exports.nonFriends = nonFriends;
    module.exports.updateObject = updateObject;
    module.exports.removeProperties = removeProperties;
    module.exports.dedup = dedup;
}